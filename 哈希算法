哈希算法一

1、什么是哈希算法
将任意长度的二进制串映射为固定长度的二进制值串，这个映射的规则就是哈希算法。

2、一个优秀的哈希算法需要满足的条件

1）从哈希值不能反向推导出原始数据（哈希算法也叫单向哈希算法）
2）对输入数据非常敏感，哪怕原始数据只修改一个Bit，最后得到的哈希值也大不相同
3）散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小
4）哈希算法的执行效率要尽量高效，针对较长的文本，也能快速的计算出哈希值

3、哈希算法七个常用应用
安全加密、唯一标识、数据校验、散列函数、负载均衡、数据分片、分布式存储

1）安全加密
常用加密算法
MD5（Message-Digest Algorithm，MD5消息摘要算法）
SHA（Secure Hash Algorithm，安全散列算法）
DES（Data Encryption Standard，数据加密标准）
AES（Advanced Encryption Standard，高级加密标准）
要求：首先很难根据哈希值反向推导出原始数据，其次散列冲突的概率要很小（做不到摒除散列冲突：鸽巢原理）

2）唯一标识
举例：在海量图库中搜索一张图是否存在

3）数据校验
举例：BT下载文件如何确保文件安全以及完整性

4）散列函数
散列函数用的散列算法一般都比较简单，比较追求效率，不太关注反向解密，更加关注散列后的值能否平均分不到各个槽中，
对散列冲突的要求要低很多，可以通过开放寻址法和链表法解决散列冲突。

字典攻击（保存常用密码字典）
解决方法：引入盐（salt），跟用户密码组合在一起，增加密码复杂度（安全与攻击是一对博弈，不存在绝对的安全，所有的安全措施只是增加攻击的成本）

哈希算法在区块链中的应用
区块链是一块块区块组成的，每个区块分为两部分：区块头和区块体，区块头保存着自己区块体和上一个区块头的哈希值，
因为这种链式关系和哈希值的唯一性，只要区块链上任意一个区块被修改过，后面所有区块保存的哈希值就不对了，区块链使用的是
SHA256哈希算法，计算哈希值非常耗时，如果要篡改一个区块，就必须重新计算区块后面所有的哈希值，短时间内几乎不可能做到。

哈希算法二

5）负载均衡
负载均衡算法：轮询、随机、加权轮询
实现会话粘滞的负载均衡算法：我们需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上

维持一张映射表：
客户端IP地址或者会话ID与服务器编号的映射关系，客户端发出的每次请求，都需要先在映射表中查找应该路由到的服务器编号，然后再请求编号对应的服务器

弊端：
1、如果客户端很多，映射表可能会很大，比较浪费内存空间
2、客户端下线、上线，服务器扩容、所容都会导致映射失效，这样维护映射表的成本机会就会很大

解决方法：
通过哈希算法，对客户端IP地址或者会话ID计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号，这
样，我们就可以将同一个IP过来的所有请求，都路由到同一个后端服务器上

6) 数据分片
如何统计“搜索关键词”出现的次数

难点：
1、搜索日志很大，没办法放到一台机器的内存中
2、如果只用一台机器来处理这么巨大的数据，处理时间会很长

处理思路：
为了提高处理的速度，我们用n台机器并行处理；我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟n取模，最终得到的值
就是应该被分配到的机器编号；这样，哈希值相同的搜索关键词被分配到了同一个机器上，也就是说，同一个搜索关键词会被分配到同一个机器上，每个机器分别计算关键
词出现的次数，最后合并起来就是最终的结果。


如何快速判断图片是否在图库中
处理思路：
我们每次从图库中读取一个图片，计算唯一标识，然后与机器个数n求余取模，得到的值就对应要分配的机器编号，然后将这个图片的唯一标识和图片路径发往对应的机器构建
散列表；当我们要判断一个图片是否在图库中的时候，我们通过同样的哈希算法，计算这个图片的唯一标识，然后与机器个数n求余取模，假设得到的值是k，那就去编号k的机器构建
的散列表中查找。

7）分布式存储
分布式缓存
1、如何决定将哪个数据放到哪台机器上：
借助数据分片的思想，即通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号。

2、数据扩容缩容

3、一致性哈希算法
