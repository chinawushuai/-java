二分查找一（如何用最省内存的方式实现快速查找功能）

1、简单的二分查找

java数组实现：

public int bsearch(int[] array,int n,int value){
  int low = 0;
  int high = n-1;
  
  while(low<=high){
    int mid = (low+high)/2;
    if(array[mid]==value){
      return mid;
    }else if(array[mid]<value){
      low=mid+1;
    }else{
      high=mid-1;
    }
  }
  
  return -1;
}

容易出错的三个地方：
1、循环退出条件：low<=high 而不是 low<high
2、mid的取值：为避免溢出，mid=(low+high)/2  ====> mid=low+(high-low)/2 ====> mid=low+((high-low)>>1),相比除运算，位运算要快很多
3、low和high的更新：low=mid+1；high=mid-1，如果low=mid和high=mid可能会发生死循环

递归实现：

public int bsearch(int[] array,int n,int val){
  return bsearchInternally(a,0,n-1,val);
}

private int bsearchInternally(int[] array,int low,int high,int value){
  if(low>high) return -1;
  
  int mid = low+(high-low)/2;
  if(array[mid]==value){
    return mid;
  }else if(array[mid]<value){
    return bsearchInternally(a,mid+1,high,value);
  }else{
    return bsearchInternally(a,low,mid-1,value);
  }
}

2、二分查找应用场景的局限性

1）二分查找依赖顺序表结构
2）二分查找针对的是有序数据
3）二分查找只能用于插入、删除操作不频繁，一次排序多次查找的场景中，适合查找静态数据 
4）数据量太小不适合二分查找，但是如果数据之间的比较操作非常耗时，不管数据量大小，都推荐使用二分查找
5）数据量太大不适合二分查找


二分查找二(二分查找的变形)

1、变形一：查找第一个值等于给定值的元素

public int bsearch(int[] array,int n,int value){
  int low = 0;
  int high = n-1;
  while(low<=high){
    int mid = low+((high-low)>>1);
    if(array[mid]>value){
      high = mid-1;
    }else if(array[mid]<value){
      low=mid+1;
    }else{
      if((mid==0)||(array[mid-1]!=value)) return mid;
      else high=mid-1;
    }
  }
  return -1;
}
