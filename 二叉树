二叉树基础一：什么样的二叉树适合用数组来存储

问题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？

树的相关概念：
节点的高度：节点到叶子节点的最长路径（边数）
节点的深度：根节点到这个节点的经历的边的个数
节点的层数：节点的深度+1
树的高度：根节点的高度

1、二叉树：每个节点最多有两个子节点，分别是左子节点和右子节点，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。

2、满二叉树：叶子节点全都在最底层，除了叶子节点外，每个节点都有左右两个子节点。
  完全二叉树：叶子节点都在最底下两层，最后一层的叶子节点全都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大。
  满二叉树是完全二叉树的一种特殊情况。
  
3、二叉树的存储方式：
  一种是基于指针或者引用的二叉链式存储法
  一种是基于数组的顺序存储法

4、基于数组的存储方法，我们将节点i的左节点存储在下标为2*i的位置，右子节点存储在下标为2*i+1的位置，因此，如果二叉树是完全二叉树则只需要浪费一个下标为0
  的存储位置。如果是非完全二叉树，则会浪费比较多的数组存储位置，所以如果一颗二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式，因为数组的存储
  方式并不需要像链式存储那样，要存储额外的左右子节点的指针。

  堆就是一种完全二叉树，最常用的存储方式就是数组。

5、二叉树的遍历：
  1）前序遍历
  对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树
  
  2）中序遍历
  对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树
  
  3）后序遍历
  对于树中的任意节点来说，先打印它的左子树，再打印它的右子树，最后打印这个节点本身
  
  时间复杂度 O(n)
  
  4）层次遍历
  广度优先的遍历算法

