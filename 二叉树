二叉树基础一：什么样的二叉树适合用数组来存储

问题：二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？

树的相关概念：
节点的高度：节点到叶子节点的最长路径（边数）
节点的深度：根节点到这个节点的经历的边的个数
节点的层数：节点的深度+1
树的高度：根节点的高度

1、二叉树：每个节点最多有两个子节点，分别是左子节点和右子节点，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。

2、满二叉树：叶子节点全都在最底层，除了叶子节点外，每个节点都有左右两个子节点。
  完全二叉树：叶子节点都在最底下两层，最后一层的叶子节点全都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大。
  满二叉树是完全二叉树的一种特殊情况。
  
3、二叉树的存储方式：
  一种是基于指针或者引用的二叉链式存储法
  一种是基于数组的顺序存储法

4、基于数组的存储方法，我们将节点i的左节点存储在下标为2*i的位置，右子节点存储在下标为2*i+1的位置，因此，如果二叉树是完全二叉树则只需要浪费一个下标为0
  的存储位置。如果是非完全二叉树，则会浪费比较多的数组存储位置，所以如果一颗二叉树是完全二叉树，那用数组存储无疑是最节省内存的一种方式，因为数组的存储
  方式并不需要像链式存储那样，要存储额外的左右子节点的指针。

  堆就是一种完全二叉树，最常用的存储方式就是数组。

5、二叉树的遍历：
  1）前序遍历
  对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树
  
  2）中序遍历
  对于树中的任意节点来说，先打印它的左子树，然后再打印它本身，最后打印它的右子树
  
  3）后序遍历
  对于树中的任意节点来说，先打印它的左子树，再打印它的右子树，最后打印这个节点本身
  
  时间复杂度 O(n)
  
  4）层次遍历
  广度优先的遍历算法
  
  二叉树基础二：有了如此高效的散列表，为什么还需要二叉树？
  
  1、二叉查找树：
    1）特点：二叉查找树的最大的特点就是支持动态数据集合的快速插入、删除、查找操作。
    2）定义：二叉查找树是二叉树最常用的一种类型，也叫二叉搜索树，二叉查找树是为了实现快速查找而生的；二叉查找树要求，在树中的任意一个节点，其左子树中的
            每个节点的值，都要小于这个节点的值，其右子树节点的值都大于这个节点的值。
    问题：既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须使用二叉树来做的呢？
    
  2、二叉查找树的查找操作：
    public class BinarySearchTree{
      private Node tree;
      
      public Node find(int data){
        Node p = tree;
        while(p != null){
          if(data<p.data) p=p.left;
          else if(data > p.data) p=p.right;
          else return p;
        }
        return null;
      }
      
      public static class Node{
        private int data;
        private Node left;
        private Node right;
        
        public Node(int data){
          this.data = data;
        }
      }
    }
    
    3、二叉查找树的插入操作
    public void insert(int data){
      if(tree==null){
        tree = new Node(data);
        return;
      }
      
      Node p = tree;
      
      while(p!=null){
        if(data>p.data){
          if(p.right==null){
            p.right=new Node(data);
            return;
          }
          p=p.right;
        }else{
          if(p.left==null){
            p.left=new Node(data);
            return;
          }
          p=p.left;
        }
      }
    }
    
    4、二叉查找树的删除操作
    1）如果要删除的节点没有子节点，我们只需要直接将父节点中，指向要删除节点的指针置为null；
    2）如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了；
    3）如果要删除的节点有两个子节点，我们需要找到这个节点的右子树的最小节点，把它替换到要删除的节点上，然后再删除掉这个最小节点，因为最小节点肯定没有左
      子节点（如果有左子节点，那就不是最小节点了）。
      
    public void delete(int data){
      Node p=tree;
      Node pp=null;
      while(p!=null && p.data!=data){
        pp=p;
        if(data>p.data) p=p.right;
        else p=p.left;
      }
      if(p==null) return;
      
      if(p.left!=null && p.right!=null){
        Node minP=p.right;
        Node minPP=p;
        while(minP.left!=null){
          minPP = minP;
          minP=minP.left;
        }
        p.data=minP.data;
        p=minP;
        pp=minPP;
      }
      
      Node child;
      
      if(p.left!=null) child=p.left;
      else if(pp.left=p) pp.left=child;
      else child=null;
      
      if(pp==null) tree=child;
      else if(pp.left==p) pp.left=child;
      else pp.right=child;
    }
    
  
  

